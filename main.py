"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                      ‚ïë
‚ïë            USER BOT v0.3.0           ‚ïë
‚ïë                                      ‚ïë
‚ïë         Created by @misha_z88        ‚ïë
‚ïë                                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

GitHub: https://github.com/misha-z88
"""

import json
import os
import pytz
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import Message
import requests
import asyncio
from config import API_ID, API_HASH, WEATHER_API_KEY
from google.generativeai import GenerativeModel, configure
from config import GOOGLE_API_KEY
import PIL.Image
from io import BytesIO
import wikipedia
import qrcode

configure(api_key=GOOGLE_API_KEY)
model = GenerativeModel('gemini-pro')
vision_model = GenerativeModel('gemini-pro-vision')

app = Client("mybot", api_id=API_ID, api_hash=API_HASH)

context_file = "context.json"
prefix_file = "prefix.json"
context_cache = {}
WEATHER_URL = "https://api.openweathermap.org/data/2.5/onecall"

def load_context():
    global context_cache
    if not context_cache:
        if os.path.exists(context_file):
            with open(context_file, "r", encoding="utf-8") as f:
                context_cache = json.load(f)
        else:
            context_cache = {}
    return context_cache

def save_context(context):
    global context_cache
    context_cache = context
    with open(context_file, "w", encoding="utf-8") as f:
        json.dump(context, f, ensure_ascii=False, indent=4)

def update_user_context(user_id, role, message):
    context = load_context()
    user_id_str = str(user_id)
    if user_id_str not in context:
        context[user_id_str] = []
    context[user_id_str].append({"role": role, "content": message})
    if len(context[user_id_str]) > 10:
        context[user_id_str].pop(0)
    save_context(context)

def load_prefix():
    if os.path.exists(prefix_file):
        with open(prefix_file, "r", encoding="utf-8") as f:
            return json.load(f).get("prefix", "/")
    return "/"

def save_prefix(prefix):
    with open(prefix_file, "w", encoding="utf-8") as f:
        json.dump({"prefix": prefix}, f, ensure_ascii=False, indent=4)

def format_message(title, content):
    return f"""
‚ï≠‚îÄ„Äå {title} „Äç
‚îÇ
{content.replace('\\n', '\\n‚îÇ ')}
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"""

@app.on_message(filters.command("start"))
async def start_handler(client, message: Message):
    prefix = load_prefix()
    welcome_text = format_message("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", f"""
–Ø - –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π User-–±–æ—Ç —Å AI!

ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Gemini Pro
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ü–æ–º–æ—â—å —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
‚Ä¢ –ü–æ–≥–æ–¥–∞, –≤—Ä–µ–º—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {prefix}help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥

üë®‚Äçüíª GitHub: https://github.com/misha-z88
üì¢ Telegram: @misha_z88
""")
    await message.reply(welcome_text)

@app.on_message(filters.command("help"))
async def help_handler(client, message: Message):
    prefix = load_prefix()
    help_text = format_message("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", f"""
üîç –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ {prefix}help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ {prefix}time - –ú–∏—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è
‚Ä¢ {prefix}info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ {prefix}weather - –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ

ü§ñ AI –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ {prefix}ai - –ó–∞–ø—Ä–æ—Å –∫ Gemini AI
‚Ä¢ {prefix}image - –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ {prefix}homework - –ü–æ–º–æ—â—å —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
‚Ä¢ {prefix}clear_context - –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
‚Ä¢ {prefix}qr - –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥
‚Ä¢ {prefix}wiki - –ü–æ–∏—Å–∫ –≤ Wikipedia
‚Ä¢ {prefix}translate - –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ {prefix}calc - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
‚Ä¢ {prefix}chat_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
‚Ä¢ {prefix}get_users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ {prefix}purge - –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ {prefix}download - –°–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞

üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:
‚Ä¢ {prefix}meme - –°–ª—É—á–∞–π–Ω—ã–π –º–µ–º
‚Ä¢ {prefix}poll - –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ {prefix}set_prefix - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å

üí° –ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ {prefix}weather –ú–æ—Å–∫–≤–∞
‚Ä¢ {prefix}ai –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–µ
‚Ä¢ {prefix}homework –†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x + 5 = 15""")

    await message.reply(help_text)

@app.on_message(filters.command("weather"))
async def weather_handler(client, message: Message):
    try:
        if len(message.command) < 2:
            await message.reply(
                format_message("–û—à–∏–±–∫–∞",
                    "‚ùó –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥\n"
                    "–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞"
                )
            )
            return

        city = message.command[1]
        
        geo_response = requests.get(
            "http://api.openweathermap.org/geo/1.0/direct",
            params={
                "q": city,
                "limit": 1,
                "appid": WEATHER_API_KEY
            }
        )
        geo_data = geo_response.json()

        if not geo_data:
            await message.reply(
                format_message("–û—à–∏–±–∫–∞",
                    "‚ùó –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è"
                )
            )
            return

        lat, lon = geo_data[0]["lat"], geo_data[0]["lon"]
        
        weather_response = requests.get(
            "https://api.openweathermap.org/data/2.5/weather",
            params={
                "lat": lat,
                "lon": lon,
                "appid": WEATHER_API_KEY,
                "units": "metric",
                "lang": "ru"
            }
        )
        weather_data = weather_response.json()

        temp = round(weather_data["main"]["temp"])
        feels_like = round(weather_data["main"]["feels_like"])
        description = weather_data["weather"][0]["description"]
        humidity = weather_data["main"]["humidity"]
        wind_speed = weather_data["wind"]["speed"]
        
        weather_text = format_message(f"–ü–æ–≥–æ–¥–∞ –≤ {city}", f"""
üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C
üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C
‚òÅÔ∏è {description.capitalize()}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%
üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å""")

        await message.reply(weather_text)

    except Exception as e:
        await message.reply(
            format_message("–û—à–∏–±–∫–∞",
                f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )
        )

@app.on_message(filters.command("qr"))
async def qr_handler(client, message: Message):
    try:
        if len(message.command) < 2:
            await message.reply("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /qr —Ç–µ–∫—Å—Ç")
            return

        text = " ".join(message.command[1:])
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(text)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        bio = BytesIO()
        img.save(bio, 'PNG')
        bio.seek(0)
        
        await message.reply_photo(
            bio,
            caption=format_message("QR Code", f"–°–æ–∑–¥–∞–Ω –¥–ª—è: {text[:50]}...")
        )
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞: {str(e)}")

@app.on_message(filters.command("wiki"))
async def wiki_handler(client, message: Message):
    try:
        if len(message.command) < 2:
            await message.reply("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /wiki –∑–∞–ø—Ä–æ—Å")
            return

        query = " ".join(message.command[1:])
        wikipedia.set_lang("ru")
        result = wikipedia.summary(query, sentences=5)
        
        await message.reply(
            format_message("Wikipedia", f"üîç –ó–∞–ø—Ä–æ—Å: {query}\n\n{result}")
        )
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞: {str(e)}")

@app.on_message(filters.command("poll"))
async def poll_handler(client, message: Message):
    try:
        args = message.text.split("\n")
        if len(args) < 3:
            await message.reply(
                "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/poll –í–æ–ø—Ä–æ—Å\n–í–∞—Ä–∏–∞–Ω—Ç 1\n–í–∞—Ä–∏–∞–Ω—Ç 2\n..."
            )
            return

        question = args[0].replace("/poll ", "")
        options = args[1:]
        
        await message.reply_poll(
            question,
            options,
            is_anonymous=False
        )
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞: {str(e)}")

@app.on_message(filters.command("time"))
async def time_handler(client, message: Message):
    city_timezones = {
        "–±–∞–∫—É": "Asia/Baku",
        "–º–æ—Å–∫–≤–∞": "Europe/Moscow",
        "–ª–æ–Ω–¥–æ–Ω": "Europe/London",
        "–ø–∞—Ä–∏–∂": "Europe/Paris",
        "–Ω—å—é-–π–æ—Ä–∫": "America/New_York",
        "—Ç–æ–∫–∏–æ": "Asia/Tokyo",
        "–¥—É–±–∞–π": "Asia/Dubai",
        "—Å—Ç–∞–º–±—É–ª": "Europe/Istanbul",
        "–±–µ—Ä–ª–∏–Ω": "Europe/Berlin",
        "—Ä–∏–º": "Europe/Rome",
        "–ø–µ–∫–∏–Ω": "Asia/Shanghai",
        "—Å–µ—É–ª": "Asia/Seoul",
        "—Å–∏–¥–Ω–µ–π": "Australia/Sydney"
    }
    
    try:
        time_info = []
        for city, timezone in city_timezones.items():
            tz = pytz.timezone(timezone)
            current_time = datetime.now(tz)
            time_info.append(f"üåç {city.capitalize()}: {current_time.strftime('%H:%M:%S')}")
        
        response = format_message("–ú–∏—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è", "\n".join(time_info))
        await message.reply(response)
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")

@app.on_message(filters.command("ai"))
async def ai_handler(client, message: Message):
    try:
        if len(message.command) < 2:
            await message.reply("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ai <–≤–∞—à –∑–∞–ø—Ä–æ—Å>")
            return

        user_query = " ".join(message.command[1:])
        user_id = str(message.from_user.id)
        
        context = load_context()
        user_context = context.get(user_id, [])
        
        messages = []
        for msg in user_context:
            messages.append({"role": msg["role"], "content": msg["content"]})
        
        messages.append({"role": "user", "content": user_query})
        
        response = model.generate_content(user_query)
        ai_response = response.text
        
        update_user_context(user_id, "user", user_query)
        update_user_context(user_id, "assistant", ai_response)
        
        await message.reply(ai_response)
        
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

@app.on_message(filters.command("image") & filters.photo)
async def image_handler(client, message: Message):
    try:
        if not message.caption:
            await message.reply("‚ùó –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
            return

        photo = message.photo.file_id
        file_path = await client.download_media(photo)
        
        img = PIL.Image.open(file_path)
        response = vision_model.generate_content([message.caption, img])
        
        os.remove(file_path)
        await message.reply(response.text)
        
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

@app.on_message(filters.command("homework"))
async def homework_handler(client, message: Message):
    try:
        if message.photo:
            if not message.caption:
                await message.reply("‚ùó –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
                return
                
            photo = message.photo.file_id
            file_path = await client.download_media(photo)
            
            img = PIL.Image.open(file_path)
            response = vision_model.generate_content([
                "–ü–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É. –û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —à–∞–≥ –∑–∞ —à–∞–≥–æ–º: " + message.caption,
                img
            ])
            
            os.remove(file_path)
            await message.reply(response.text)
            
        elif len(message.command) > 1:
            query = " ".join(message.command[1:])
            response = model.generate_content(
                "–ü–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É. –û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —à–∞–≥ –∑–∞ —à–∞–≥–æ–º: " + query
            )
            await message.reply(response.text)
            
        else:
            await message.reply("‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")
            
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

@app.on_message(filters.command("clear_context"))
async def clear_context_handler(client, message: Message):
    try:
        user_id = str(message.from_user.id)
        context = load_context()
        
        if user_id in context:
            del context[user_id]
            save_context(context)
            await message.reply("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
        else:
            await message.reply("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {str(e)}")

@app.on_message(filters.command("chat_info"))
async def chat_info_handler(client, message: Message):
    try:
        if len(message.command) < 2:
            chat = message.chat
        else:
            chat_username = message.command[1].replace("@", "")
            chat = await client.get_chat(chat_username)
        
        info = format_message("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ", f"""
üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ ID: {chat.id}
‚Ä¢ –¢–∏–ø: {chat.type}
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title if chat.title else '–ù/–î'}
‚Ä¢ –Æ–∑–µ—Ä–Ω–µ–π–º: {chat.username if chat.username else '–ù/–î'}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {chat.description if chat.description else '–ù/–î'}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat.members_count if hasattr(chat, 'members_count') else '–ù/–î'}
‚Ä¢ –°–æ–∑–¥–∞–Ω: {chat.date if hasattr(chat, 'date') else '–ù/–î'}
""")
        await message.reply(info)
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞: {str(e)}")

@app.on_message(filters.command("purge"))
async def purge_handler(client, message: Message):
    try:
        if len(message.command) != 2:
            await message.reply("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /purge –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–æ–æ–±—â–µ–Ω–∏–π")
            return
            
        count = int(message.command[1])
        if count > 1000:
            await message.reply("‚ùó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: 1000")
            return
            
        messages_to_delete = []
        async for msg in client.get_chat_history(message.chat.id, limit=count):
            if msg.from_user and msg.from_user.id == client.me.id:
                messages_to_delete.append(msg.id)
                
        await client.delete_messages(message.chat.id, messages_to_delete)
        status_msg = await message.reply(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(messages_to_delete)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        await asyncio.sleep(3)
        await status_msg.delete()
        
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞: {str(e)}")

@app.on_message(filters.command("get_users"))
async def get_users_handler(client, message: Message):
    try:
        if not message.chat.id:
            await message.reply("‚ùó –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö")
            return
            
        users_info = []
        async for member in client.get_chat_members(message.chat.id):
            user = member.user
            users_info.append(f"‚Ä¢ {user.first_name} ({user.id})")
            if len(users_info) >= 20: 
                break
                
        response = format_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–∞—Ç–∞", "\n".join(users_info))
        await message.reply(response)
        
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞: {str(e)}")

@app.on_message(filters.command("download"))
async def download_handler(client, message: Message):
    try:
        if not message.reply_to_message:
            await message.reply("‚ùó –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º")
            return
            
        reply = message.reply_to_message
        
        if reply.photo:
            path = await client.download_media(reply.photo.file_id)
            media_type = "—Ñ–æ—Ç–æ"
        elif reply.video:
            path = await client.download_media(reply.video.file_id)
            media_type = "–≤–∏–¥–µ–æ"
        elif reply.document:
            path = await client.download_media(reply.document.file_id)
            media_type = "—Ñ–∞–π–ª"
        elif reply.audio:
            path = await client.download_media(reply.audio.file_id)
            media_type = "–∞—É–¥–∏–æ"
        else:
            await message.reply("‚ùó –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞")
            return
            
        await message.reply(
            format_message("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                f"‚úÖ {media_type.capitalize()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {path}"
            )
        )
        
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞: {str(e)}")

@app.on_message(filters.command("set_prefix"))
async def set_prefix_handler(client, message: Message):
    try:
        if len(message.command) != 2:
            await message.reply(
                format_message("–û—à–∏–±–∫–∞",
                    "‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å. –ü—Ä–∏–º–µ—Ä: /set_prefix !"
                )
            )
            return
        
        new_prefix = message.command[1]
        if len(new_prefix) != 1:
            await message.reply(
                format_message("–û—à–∏–±–∫–∞",
                    "‚ùó –ü—Ä–µ—Ñ–∏–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º"
                )
            )
            return
        
        save_prefix(new_prefix)
        await message.reply(
            format_message("–£—Å–ø–µ—Ö",
                f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å: {new_prefix}"
            )
        )
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                      ‚ïë
‚ïë         USER BOT v0.3.0              ‚ïë
‚ïë         Starting...                  ‚ïë
‚ïë                                      ‚ïë
‚ïë         by @misha_z88                ‚ïë
‚ïë                                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    app.run()
